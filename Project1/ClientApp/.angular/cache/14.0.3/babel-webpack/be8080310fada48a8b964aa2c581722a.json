{"ast":null,"code":"import _asyncToGenerator from \"D:/PROJECTS/Angular/Project1/Project1/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __param } from \"tslib\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { Inject, Injectable } from '@angular/core';\nimport { Subject } from \"rxjs\";\nlet AuthService = class AuthService {\n  constructor(http, baseUrl, router) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.router = router;\n    this.userLoginSource = new Subject();\n    this.userLogin$ = this.userLoginSource.asObservable(); //user: UserModel; \n\n    this.userLogoutSource = new Subject();\n    this.userLogout$ = this.userLogoutSource.asObservable();\n    this.user = null;\n    const token = localStorage.getItem('access_token');\n\n    if (token !== null) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + token);\n      this.http.post(this.baseUrl + 'authorization/update', {}, {\n        headers: headers\n      }).subscribe(result => {\n        localStorage.setItem('access_token', result.token);\n        this.user = result.user;\n        this.userLoginSource.next(this.user);\n      }, error => console.error(error));\n    }\n  }\n\n  login(email, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const headers = new HttpHeaders().set('Content-Type', 'application/json');\n        const body = {\n          email: email,\n          password: password\n        };\n        var result = yield _this.http.post(_this.baseUrl + 'authorization/login', body, {\n          headers: headers\n        }).toPromise();\n        localStorage.setItem('access_token', result.token);\n        _this.user = result.user;\n\n        _this.userLoginSource.next(_this.user);\n\n        _this.router.navigate(['account']);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    })();\n  }\n\n};\nAuthService = __decorate([Injectable(), __param(1, Inject('BASE_URL'))], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";;AAAA,SAAqBA,WAArB,QAAoD,sBAApD;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,eAAnC;AACA,SAASC,OAAT,QAAwB,MAAxB;AAIA,IAAaC,WAAW,GAAxB,MAAaA,WAAb,CAAwB;EAWpBC,YAAoBC,IAApB,EAAkEC,OAAlE,EAA2FC,MAA3F,EAAyG;IAArF;IAA8C;IAAyB;IAVrF,uBAAkB,IAAIL,OAAJ,EAAlB;IACR,kBAAa,KAAKM,eAAL,CAAqBC,YAArB,EAAb,CAS2G,CAP3G;;IAEQ,wBAAmB,IAAIP,OAAJ,EAAnB;IACR,mBAAc,KAAKQ,gBAAL,CAAsBD,YAAtB,EAAd;IAEA,YAA0B,IAA1B;IAGI,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAd;;IACA,IAAIF,KAAK,KAAK,IAAd,EAAoB;MAElB,MAAMG,OAAO,GAAG,IAAIf,WAAJ,GACbgB,GADa,CACT,cADS,EACO,kBADP,EAEbA,GAFa,CAET,eAFS,EAEQ,YAAYJ,KAFpB,CAAhB;MAIA,KAAKN,IAAL,CAAUW,IAAV,CAAoB,KAAKV,OAAL,GAAe,sBAAnC,EAA2D,EAA3D,EAA+D;QAAEQ,OAAO,EAAEA;MAAX,CAA/D,EACGG,SADH,CACaC,MAAM,IAAG;QAClBN,YAAY,CAACO,OAAb,CAAqB,cAArB,EAAqCD,MAAM,CAACP,KAA5C;QACA,KAAKS,IAAL,GAAYF,MAAM,CAACE,IAAnB;QACA,KAAKZ,eAAL,CAAqBa,IAArB,CAA0B,KAAKD,IAA/B;MACD,CALH,EAMIE,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CANb;IAOD;EACF;;EAEGE,KAAK,CAACC,KAAD,EAAgBC,QAAhB,EAAgC;IAAA;;IAAA;MACvC,IAAI;QACF,MAAMZ,OAAO,GAAG,IAAIf,WAAJ,GAAkBgB,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAhB;QAEA,MAAMY,IAAI,GAAG;UACXF,KAAK,EAAEA,KADI;UAEXC,QAAQ,EAAEA;QAFC,CAAb;QAKA,IAAIR,MAAM,SAAS,KAAI,CAACb,IAAL,CAAUW,IAAV,CAAoB,KAAI,CAACV,OAAL,GAAe,qBAAnC,EAA0DqB,IAA1D,EAAgE;UAAEb,OAAO,EAAEA;QAAX,CAAhE,EAAsFc,SAAtF,EAAnB;QACAhB,YAAY,CAACO,OAAb,CAAqB,cAArB,EAAqCD,MAAM,CAACP,KAA5C;QACA,KAAI,CAACS,IAAL,GAAYF,MAAM,CAACE,IAAnB;;QACA,KAAI,CAACZ,eAAL,CAAqBa,IAArB,CAA0B,KAAI,CAACD,IAA/B;;QACF,KAAI,CAACb,MAAL,CAAYsB,QAAZ,CAAqB,CAAC,SAAD,CAArB;;QACE,OAAO,IAAP;MACD,CAdD,CAeF,OAAMC,CAAN,EAAS;QACL,OAAO,KAAP;MACD;IAlBsC;EAmBxC;;AAhDmB,CAAxB;AAAa3B,WAAW,eADvBF,UAAU,EACa,EAWmB8B,iBAAM,CAAC,UAAD,CAAN,CAXnB,GAAX5B,WAAW,CAAX;SAAAA","names":["HttpHeaders","Inject","Injectable","Subject","AuthService","constructor","http","baseUrl","router","userLoginSource","asObservable","userLogoutSource","token","localStorage","getItem","headers","set","post","subscribe","result","setItem","user","next","error","console","login","email","password","body","toPromise","navigate","e","__param"],"sourceRoot":"","sources":["D:\\PROJECTS\\Angular\\Project1\\Project1\\ClientApp\\src\\services\\autorization.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Subject } from \"rxjs\";\r\nimport { UsersModel } from '../shared/model/profile';\r\nimport { getBaseUrl } from \"../main\";\r\n@Injectable()\r\nexport class AuthService {\r\n  private userLoginSource = new Subject<UsersModel | null>();\r\n  userLogin$ = this.userLoginSource.asObservable();\r\n\r\n  //user: UserModel; \r\n\r\n  private userLogoutSource = new Subject<boolean>();\r\n  userLogout$ = this.userLogoutSource.asObservable();\r\n\r\n  user: UsersModel | null = null;\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string, private router: Router) {\r\n      const token = localStorage.getItem('access_token');\r\n      if (token !== null) {\r\n\r\n        const headers = new HttpHeaders()\r\n          .set('Content-Type', 'application/json')\r\n          .set('Authorization', 'Bearer ' + token);\r\n\r\n        this.http.post<any>(this.baseUrl + 'authorization/update', {}, { headers: headers })\r\n          .subscribe(result => {\r\n            localStorage.setItem('access_token', result.token);\r\n            this.user = result.user;\r\n            this.userLoginSource.next(this.user)\r\n          },\r\n            error => console.error(error));\r\n      }\r\n    }\r\n\r\n  async login(email: string, password: string): Promise < boolean > {\r\n      try {\r\n        const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n        const body = {\r\n          email: email,\r\n          password: password\r\n        };\r\n\r\n        var result = await this.http.post<any>(this.baseUrl + 'authorization/login', body, { headers: headers }).toPromise();\r\n        localStorage.setItem('access_token', result.token);\r\n        this.user = result.user;\r\n        this.userLoginSource.next(this.user)\r\n      this.router.navigate(['account']);\r\n        return true;\r\n      }\r\n    catch(e) {\r\n        return false;\r\n      }\r\n    }\r\n  //public Logout() {\r\n  //  this.UserLogoutSource.next('Виконаний вихід');\r\n  //  localStorage.removeItem('token');\r\n  //  this.isAutorize = false;\r\n  //}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}